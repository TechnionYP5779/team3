package fluent.ly;
import static il.org.spartan.Utils.*;
import static fluent.ly.azzert.*;

import java.util.*;

import org.junit.*;
import static fluent.ly.box.*; 

@SuppressWarnings("static-method") public class AzzertTest {
  @Test public void testStuff() {
    final List<Integer> lst = new ArrayList<>();
    lst.add(box(0));
    lst.add(box(1));
    lst.add(box(2));
    lst.add(box(3));
    final List<Integer> lst2 = new ArrayList<>(lst);
    final Integer[] arr = { box(0), box(1), box(2), box(3) };
    azzert.assertCollectionsEqual(lst, lst2);
    azzert.assertCollectionsEqual(lst, arr);
    azzert.assertCollectionsEqual("bla", lst, lst2);
    azzert.assertCollectionsEqual("bla", lst, arr);
    azzert.assertCollectionsEqual("bla", arr, lst);
    azzert.assertContains(lst2, box(1));
    azzert.assertContains("bla", lst2, box(1));
    azzert.assertNotContains(lst2, box(15));
    azzert.assertNotContains("bla", lst2, box(15));
    azzert.assertEquals(true, box(true));
    azzert.assertEquals(box(true), true);
    azzert.assertEquals(1, box(1));
    azzert.assertEquals(box(1), 1);
    azzert.assertEquals("bla", true, true);
    azzert.assertEquals("bla", true, box(true));
    azzert.assertEquals("bla", box(true), true);
    azzert.assertEquals("bla", 1, box(1));
    azzert.assertEquals("bla", box(1), 1);
    azzert.assertEquals("bla", 1, 1);
    azzert.assertNotEquals(new Object(), "bla");
    azzert.assertNotEquals("bla", new Object(), "bla");
    azzert.assertNotEquals("notBla", "bla");
    azzert.assertNotEquals("bla", "notBla", "bla");
    azzert.assertNull(null);
    azzert.assertNull("bla", null);
    azzert.isNull("bla", null);
    azzert.assertPositive(15);
    azzert.positive(15);
    azzert.assertZero(0);
    azzert.assertSubset(lst, lst2);
    azzert.comparesEqualTo(true);
    azzert.comparesEqualTo((byte) 1);
    azzert.comparesEqualTo((char) 1);
    azzert.comparesEqualTo((short) 1);
    azzert.comparesEqualTo(1.0);
    azzert.comparesEqualTo(1.0f);
    azzert.comparesEqualTo(1);
    azzert.comparesEqualTo(1L);
    azzert.containsString("bla");
    azzert.endsWith("bla");
    azzert.falze(false);
    azzert.greaterThan(true);
    azzert.greaterThan((byte) 1);
    azzert.greaterThan((char) 1);
    azzert.greaterThan((short) 1);
    azzert.greaterThan(1.0);
    azzert.greaterThan(1.0f);
    azzert.greaterThan(1);
    azzert.greaterThan(1L);
    azzert.greaterThanOrEqualTo(true);
    azzert.greaterThanOrEqualTo((byte) 1);
    azzert.greaterThanOrEqualTo((char) 1);
    azzert.greaterThanOrEqualTo((short) 1);
    azzert.greaterThanOrEqualTo(1.0);
    azzert.greaterThanOrEqualTo(1.0f);
    azzert.greaterThanOrEqualTo(1);
    azzert.greaterThanOrEqualTo(1L);
    azzert.equals("bla", lst, lst2);
    azzert.equalTo(box(1));
    azzert.instanceOf(String.class);
    azzert.isA(String.class);
    is(true);
    is((byte) 1);
    is((char) 1);
    is((short) 1);
    is(1.0);
    is(1.0f);
    is(1);
    is(1L);
    is(is(1));
    azzert.lessThan(true);
    azzert.lessThan((byte) 1);
    azzert.lessThan((char) 1);
    azzert.lessThan((short) 1);
    azzert.lessThan(1.0);
    azzert.lessThan(1.0f);
    azzert.lessThan(1);
    azzert.lessThan(1L);
    azzert.lessThanOrEqualTo(true);
    azzert.lessThanOrEqualTo((byte) 1);
    azzert.lessThanOrEqualTo((char) 1);
    azzert.lessThanOrEqualTo((short) 1);
    azzert.lessThanOrEqualTo(1.0);
    azzert.lessThanOrEqualTo(1.0f);
    azzert.lessThanOrEqualTo(1);
    azzert.lessThanOrEqualTo(1L);
    azzert.not(true);
    azzert.not((byte) 1);
    azzert.not((char) 1);
    azzert.not((short) 1);
    azzert.not(1.0);
    azzert.not(1.0f);
    azzert.not(1);
    azzert.not(1L);
    azzert.not(is(1));
    azzert.notNull(new Object());
    azzert.notNull("bla", new Object());
    azzert.startsWith("bla");
    azzert.that(cantBeNull(box(5)), cantBeNull(any(Integer.class)));
    azzert.that(cantBeNull(box(5)), cantBeNull(anyOf(as.list(any(Integer.class)))));
    azzert.that(cantBeNull(box(5)), cantBeNull(anyOf(any(Integer.class))));
    azzert.that(cantBeNull(box(5)), cantBeNull(allOf(any(Integer.class))));
    azzert.that(cantBeNull(box(5)), cantBeNull(allOf(as.list(any(Integer.class)))));
    azzert.that(cantBeNull(box(5)), cantBeNull(allOf(any(Integer.class), is(box(5)))));
    azzert.that(cantBeNull(box(5)), cantBeNull(anything()));
    azzert.that(cantBeNull(box(5)), cantBeNull(anything("dont care")));
    azzert.assertEquals(true, true);
    azzert.assertEquals(1, 1);
    azzert.assertLE("error", 5, 5);
    azzert.that(cantBeNull(box(5)), cantBeNull(azzert.describedAs("desc", is(5))));
    azzert.that("bla", cantBeNull(equalToIgnoringCase("BLA")));
    azzert.that("bla", cantBeNull(equalToIgnoringWhiteSpace("bla")));
    azzert.that(as.list("a","a"), cantBeNull(everyItem(is("a"))));
    azzert.that(as.list("a","b"), cantBeNull(hasItem(is("a"))));
    azzert.that(as.list("a","b"), cantBeNull(hasItem("a")));
    azzert.that(as.list("a","b"), cantBeNull(hasItems(is("a"), is("b"))));
    azzert.that(as.list("a","b"), cantBeNull(hasItems("a", "b")));
    azzert.isNull(null);
    azzert.nonNulls(as.list("a","b"));
    azzert.that("a", not("b"));
    azzert.notNullz("a","b");
    String a = "";
    forget.it(a);
    azzert.that(a, sameInstance(a));
    azzert.that('c', is('c'));
    long l = 5;
    forget.it(l);
    azzert.that(l, is(l));
    byte b = 5;
    forget.it(b);
    azzert.that(b, is(b));
    float f = 5;
    forget.it(f);
    azzert.that(f, is(f));
    short s = 5;
    forget.it(s);
    azzert.that(s, is(s));
    azzert.that(4.4, is(4.4));
  }
}
